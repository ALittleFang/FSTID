<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CodeStyleManager">
    <option name="USE_DEFAULT_CODE_STYLE_SCHEME" value="true" />
    <option name="CODE_STYLE_SCHEME" value="" />
  </component>
  <component name="CompilerConfiguration">
    <wildcardResourcePatterns>
      <entry name="!?*.java" />
    </wildcardResourcePatterns>
    <annotationProcessing>
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="librec" />
      </profile>
    </annotationProcessing>
    <bytecodeTargetLevel>
      <module name="librec" target="1.7" />
    </bytecodeTargetLevel>
  </component>
  <component name="ExportToHTMLSettings">
    <option name="PRINT_LINE_NUMBERS" value="false" />
    <option name="OPEN_IN_BROWSER" value="false" />
    <option name="OUTPUT_DIRECTORY" />
  </component>
  <component name="ImportConfiguration">
    <option name="VENDOR" />
    <option name="RELEASE_TAG" />
    <option name="LOG_MESSAGE" />
    <option name="CHECKOUT_AFTER_IMPORT" value="true" />
  </component>
  <component name="InspectionProjectProfileManager">
    <profile version="1.0">
      <option name="myName" value="Project Default" />
      <inspection_tool class="Duplicates" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
    </profile>
    <version value="1.0" />
  </component>
  <component name="JUnitGeneratorProjectSettings">
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
        <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$date&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass { &#10;&#10;@Before&#10;public void before() throws Exception { &#10;} &#10;&#10;@After&#10;public void after() throws Exception { &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;} &#10;#end" />
      </map>
    </option>
  </component>
  <component name="JUnitProjectSettings">
    <option name="TEST_RUNNER" value="UI" />
  </component>
  <component name="JavadocGenerationManager">
    <option name="OUTPUT_DIRECTORY" />
    <option name="OPTION_SCOPE" value="protected" />
    <option name="OPTION_HIERARCHY" value="false" />
    <option name="OPTION_NAVIGATOR" value="false" />
    <option name="OPTION_INDEX" value="false" />
    <option name="OPTION_SEPARATE_INDEX" value="false" />
    <option name="OPTION_USE_1_1" value="false" />
    <option name="OPTION_DOCUMENT_TAG_USE" value="false" />
    <option name="OPTION_DOCUMENT_TAG_AUTHOR" value="false" />
    <option name="OPTION_DOCUMENT_TAG_VERSION" value="false" />
    <option name="OPTION_DOCUMENT_TAG_DEPRECATED" value="false" />
    <option name="OPTION_DEPRECATED_LIST" value="false" />
    <option name="OTHER_OPTIONS" />
    <option name="HEAP_SIZE" />
    <option name="OPEN_IN_BROWSER" value="false" />
  </component>
  <component name="JikesSettings">
    <option name="DEBUGGING_INFO" value="true" />
    <option name="DEPRECATION" value="true" />
    <option name="GENERATE_NO_WARNINGS" value="false" />
    <option name="GENERATE_MAKE_FILE_DEPENDENCIES" value="false" />
    <option name="DO_FULL_DEPENDENCE_CHECK" value="false" />
    <option name="IS_INCREMENTAL_MODE" value="false" />
    <option name="IS_EMACS_ERRORS_MODE" value="true" />
    <option name="ADDITIONAL_OPTIONS_STRING" value="" />
    <option name="MAXIMUM_HEAP_SIZE" value="128" />
  </component>
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/librec.iml" filepath="$PROJECT_DIR$/librec.iml" />
    </modules>
  </component>
  <component name="ProjectResources">
    <resource url="http://jakarta.apache.org/log4j/" location="$PROJECT_DIR$" />
  </component>
  <component name="ProjectRootManager" version="2" project-jdk-name="1.7" />
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
  <component name="libraryTable">
    <library name="happy.coding.utils-1.2.5">
      <CLASSES>
        <root url="jar://$PROJECT_DIR$/lib/happy.coding.utils-1.2.5.jar!/" />
      </CLASSES>
      <JAVADOC />
      <SOURCES />
    </library>
    <library name="Maven: com.google.guava:guava:15.0">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/com/google/guava/guava/15.0/guava-15.0.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/com/google/guava/guava/15.0/guava-15.0-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/com/google/guava/guava/15.0/guava-15.0-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: javax.activation:activation:1.1">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/javax/activation/activation/1.1/activation-1.1-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/javax/activation/activation/1.1/activation-1.1-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: javax.mail:mail:1.4.5">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/javax/mail/mail/1.4.5/mail-1.4.5.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/javax/mail/mail/1.4.5/mail-1.4.5-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/javax/mail/mail/1.4.5/mail-1.4.5-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: log4j:log4j:1.2.16">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: net.sourceforge.jexcelapi:jxl:2.6.10">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/net/sourceforge/jexcelapi/jxl/2.6.10/jxl-2.6.10.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/net/sourceforge/jexcelapi/jxl/2.6.10/jxl-2.6.10-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/net/sourceforge/jexcelapi/jxl/2.6.10/jxl-2.6.10-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: org.slf4j:slf4j-api:1.6.4">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4-sources.jar!/" />
      </SOURCES>
    </library>
    <library name="Maven: org.slf4j:slf4j-log4j12:1.6.4">
      <CLASSES>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-log4j12/1.6.4/slf4j-log4j12-1.6.4.jar!/" />
      </CLASSES>
      <JAVADOC>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-log4j12/1.6.4/slf4j-log4j12-1.6.4-javadoc.jar!/" />
      </JAVADOC>
      <SOURCES>
        <root url="jar://$USER_HOME$/.m2/repository/org/slf4j/slf4j-log4j12/1.6.4/slf4j-log4j12-1.6.4-sources.jar!/" />
      </SOURCES>
    </library>
  </component>
</project>